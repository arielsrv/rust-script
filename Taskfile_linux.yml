# yaml-language-server: $schema=https://json.schemastore.org/taskfile.json
version: '3'

tasks:
  upgrade:
    cmds:
      - brew update ; brew upgrade
      - task: go
  native:
    cmds:
      - echo @TODO
  go:
    cmds:
      - echo @TODO

  k:fix:
    cmds:
      - (cd {{.KUBERNETES_MANIFESTS_DIR}}{{.S}}base || exit ; kustomize edit fix --vars)
      - (cd {{.KUBERNETES_MANIFESTS_DIR}}{{.S}}overlays{{.S}}{{.CLI_ARGS}} || exit ; kustomize edit fix --vars)

  k:mkdir:
    cmds:
      - mkdir -p {{.KUBERNETES_OUTPUT_DIR}}

  k:build:
    vars:
      ENV: '{{.CLI_ARGS | default "local"}}'
    cmds:
      - |
        kustomize build {{.KUBERNETES_MANIFESTS_DIR}}{{.S}}overlays{{.S}}{{.ENV}} \
        --output {{.KUBERNETES_OUTPUT_DIR}}{{.S}}release.yaml \
        --load-restrictor LoadRestrictionsNone

  k:tls:
    cmds:
      - |
        kubectl apply -f {{.KUBERNETES_MANIFESTS_DIR}}{{.S}}overlays{{.S}}local{{.S}}namespace.yaml
        kubectl create secret tls {{.APP_NAME}}--secret \
          --cert {{.KUBERNETES_CERT}}{{.S}}{{.KUBERNETES_INGRESS}}.pem \
          --key  {{.KUBERNETES_CERT}}{{.S}}{{.KUBERNETES_INGRESS}}-key.pem \
          -n {{.KUBERNETES_APP_NAMESPACE}}

  k:apply:
    cmds:
      - kubectl apply -f {{.KUBERNETES_OUTPUT_DIR}}{{.S}}release.yaml
      - kubectl rollout restart {{.KUBERNETES_APP_DEPLOYMENT_NAME}} -n {{.KUBERNETES_APP_NAMESPACE}}
      - kubectl rollout status {{.KUBERNETES_APP_DEPLOYMENT_NAME}} -n {{.KUBERNETES_APP_NAMESPACE}}

  tf:mkdir:
    cmds:
      - mkdir -p {{.BUILD_DIR}}/terraform

  docker:run:
    silent: true
    vars:
      ENV: localstack
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    cmds:
      - |
        docker run -p 8081:8081 --name {{.APP_NAME}} \
          -e APP_NAME={{.APP_NAME}} \
          -e ENV={{.ENV}} \
          -e AWS_ACCESS_KEY_ID={{.AWS_ACCESS_KEY_ID}} \
          -e AWS_SECRET_ACCESS_KEY={{.AWS_SECRET_ACCESS_KEY}} \
          {{.DOCKER_IMAGE}}

  docker:stop:
    silent: true
    cmds:
      - |
        docker stop {{.APP_NAME}} || true && docker rm {{.APP_NAME}} || true

  cert:mkdir:
    cmds:
      - mkdir -p {{.KUBERNETES_CERT}}

  cert:install:
    cmds:
      - (cd "{{.KUBERNETES_CERT}}" ||exit ; mkcert --install {{.KUBERNETES_INGRESS}})

  test:cover:
    cmds:
      - mkdir -p {{.REPORTS}}
      - GOEXPERIMENT=nocoverageredesign APP_NAME={{.APP_NAME}} go test -coverprofile {{.REPORTS}}{{.S}}cover.out ./{{.SRC_DIR}}/...
      - go tool cover -html {{.REPORTS}}{{.S}}cover.out -o {{.REPORTS}}{{.S}}cover.html
      - go tool cover -func={{.REPORTS}}{{.S}}cover.out

  run:
    cmds:
      - 'APP_NAME={{.APP_NAME}} {{.BIN}}'
